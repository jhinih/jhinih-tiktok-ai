// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.9.0
// source: ai.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ai_AICommonChat_FullMethodName  = "/ai.ai/AICommonChat"
	Ai_AIVideoChat_FullMethodName   = "/ai.ai/AIVideoChat"
	Ai_AISendCode_FullMethodName    = "/ai.ai/AISendCode"
	Ai_AISendResume_FullMethodName  = "/ai.ai/AISendResume"
	Ai_AIGetUserInfo_FullMethodName = "/ai.ai/AIGetUserInfo"
	Ai_AIGetVideo_FullMethodName    = "/ai.ai/AIGetVideo"
	Ai_AI_FullMethodName            = "/ai.ai/AI"
)

// AiClient is the client API for Ai service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiClient interface {
	AICommonChat(ctx context.Context, in *AICommonChatRequest, opts ...grpc.CallOption) (*AICommonChatResponse, error)
	AIVideoChat(ctx context.Context, in *AIVideoChatRequest, opts ...grpc.CallOption) (*AIVideoChatResponse, error)
	AISendCode(ctx context.Context, in *AISendCodeRequest, opts ...grpc.CallOption) (*AISendCodeResponse, error)
	AISendResume(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
	AIGetUserInfo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
	AIGetVideo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
	AI(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
}

type aiClient struct {
	cc grpc.ClientConnInterface
}

func NewAiClient(cc grpc.ClientConnInterface) AiClient {
	return &aiClient{cc}
}

func (c *aiClient) AICommonChat(ctx context.Context, in *AICommonChatRequest, opts ...grpc.CallOption) (*AICommonChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AICommonChatResponse)
	err := c.cc.Invoke(ctx, Ai_AICommonChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AIVideoChat(ctx context.Context, in *AIVideoChatRequest, opts ...grpc.CallOption) (*AIVideoChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIVideoChatResponse)
	err := c.cc.Invoke(ctx, Ai_AIVideoChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AISendCode(ctx context.Context, in *AISendCodeRequest, opts ...grpc.CallOption) (*AISendCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AISendCodeResponse)
	err := c.cc.Invoke(ctx, Ai_AISendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AISendResume(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, Ai_AISendResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AIGetUserInfo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, Ai_AIGetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AIGetVideo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, Ai_AIGetVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) AI(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIResponse)
	err := c.cc.Invoke(ctx, Ai_AI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiServer is the server API for Ai service.
// All implementations must embed UnimplementedAiServer
// for forward compatibility.
type AiServer interface {
	AICommonChat(context.Context, *AICommonChatRequest) (*AICommonChatResponse, error)
	AIVideoChat(context.Context, *AIVideoChatRequest) (*AIVideoChatResponse, error)
	AISendCode(context.Context, *AISendCodeRequest) (*AISendCodeResponse, error)
	AISendResume(context.Context, *AIRequest) (*AIResponse, error)
	AIGetUserInfo(context.Context, *AIRequest) (*AIResponse, error)
	AIGetVideo(context.Context, *AIRequest) (*AIResponse, error)
	AI(context.Context, *AIRequest) (*AIResponse, error)
	mustEmbedUnimplementedAiServer()
}

// UnimplementedAiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiServer struct{}

func (UnimplementedAiServer) AICommonChat(context.Context, *AICommonChatRequest) (*AICommonChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AICommonChat not implemented")
}
func (UnimplementedAiServer) AIVideoChat(context.Context, *AIVideoChatRequest) (*AIVideoChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIVideoChat not implemented")
}
func (UnimplementedAiServer) AISendCode(context.Context, *AISendCodeRequest) (*AISendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AISendCode not implemented")
}
func (UnimplementedAiServer) AISendResume(context.Context, *AIRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AISendResume not implemented")
}
func (UnimplementedAiServer) AIGetUserInfo(context.Context, *AIRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGetUserInfo not implemented")
}
func (UnimplementedAiServer) AIGetVideo(context.Context, *AIRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIGetVideo not implemented")
}
func (UnimplementedAiServer) AI(context.Context, *AIRequest) (*AIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AI not implemented")
}
func (UnimplementedAiServer) mustEmbedUnimplementedAiServer() {}
func (UnimplementedAiServer) testEmbeddedByValue()            {}

// UnsafeAiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiServer will
// result in compilation errors.
type UnsafeAiServer interface {
	mustEmbedUnimplementedAiServer()
}

func RegisterAiServer(s grpc.ServiceRegistrar, srv AiServer) {
	// If the following call pancis, it indicates UnimplementedAiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ai_ServiceDesc, srv)
}

func _Ai_AICommonChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AICommonChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AICommonChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AICommonChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AICommonChat(ctx, req.(*AICommonChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AIVideoChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIVideoChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AIVideoChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AIVideoChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AIVideoChat(ctx, req.(*AIVideoChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AISendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AISendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AISendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AISendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AISendCode(ctx, req.(*AISendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AISendResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AISendResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AISendResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AISendResume(ctx, req.(*AIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AIGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AIGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AIGetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AIGetUserInfo(ctx, req.(*AIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AIGetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AIGetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AIGetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AIGetVideo(ctx, req.(*AIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_AI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).AI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_AI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).AI(ctx, req.(*AIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ai_ServiceDesc is the grpc.ServiceDesc for Ai service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ai_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.ai",
	HandlerType: (*AiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AICommonChat",
			Handler:    _Ai_AICommonChat_Handler,
		},
		{
			MethodName: "AIVideoChat",
			Handler:    _Ai_AIVideoChat_Handler,
		},
		{
			MethodName: "AISendCode",
			Handler:    _Ai_AISendCode_Handler,
		},
		{
			MethodName: "AISendResume",
			Handler:    _Ai_AISendResume_Handler,
		},
		{
			MethodName: "AIGetUserInfo",
			Handler:    _Ai_AIGetUserInfo_Handler,
		},
		{
			MethodName: "AIGetVideo",
			Handler:    _Ai_AIGetVideo_Handler,
		},
		{
			MethodName: "AI",
			Handler:    _Ai_AI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai.proto",
}
