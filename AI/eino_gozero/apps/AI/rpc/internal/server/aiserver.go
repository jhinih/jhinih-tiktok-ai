// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: ai.proto

package server

import (
	"context"

	"eino_gozero/apps/AI/rpc/internal/logic"
	"eino_gozero/apps/AI/rpc/internal/svc"
	"eino_gozero/apps/AI/rpc/types/ai"
)

type AiServer struct {
	svcCtx *svc.ServiceContext
	ai.UnimplementedAiServer
}

func NewAiServer(svcCtx *svc.ServiceContext) *AiServer {
	return &AiServer{
		svcCtx: svcCtx,
	}
}

func (s *AiServer) AICommonChat(ctx context.Context, in *ai.AICommonChatRequest) (*ai.AICommonChatResponse, error) {
	l := logic.NewAICommonChatLogic(ctx, s.svcCtx)
	return l.AICommonChat(in)
}

func (s *AiServer) AIVideoChat(ctx context.Context, in *ai.AIVideoChatRequest) (*ai.AIVideoChatResponse, error) {
	l := logic.NewAIVideoChatLogic(ctx, s.svcCtx)
	return l.AIVideoChat(in)
}

func (s *AiServer) AISendCode(ctx context.Context, in *ai.AISendCodeRequest) (*ai.AISendCodeResponse, error) {
	l := logic.NewAISendCodeLogic(ctx, s.svcCtx)
	return l.AISendCode(in)
}

func (s *AiServer) AIGetUserInfo(ctx context.Context, in *ai.AIRequest) (*ai.AIResponse, error) {
	l := logic.NewAIGetUserInfoLogic(ctx, s.svcCtx)
	return l.AIGetUserInfo(in)
}

func (s *AiServer) AI(ctx context.Context, in *ai.AIRequest) (*ai.AIResponse, error) {
	l := logic.NewAILogic(ctx, s.svcCtx)
	return l.AI(in)
}
