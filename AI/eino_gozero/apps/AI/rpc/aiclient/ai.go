// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: ai.proto

package aiclient

import (
	"context"

	"eino_gozero/apps/AI/rpc/types/ai"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AICommonChatRequest  = ai.AICommonChatRequest
	AICommonChatResponse = ai.AICommonChatResponse
	AIRequest            = ai.AIRequest
	AIResponse           = ai.AIResponse
	AISendCodeRequest    = ai.AISendCodeRequest
	AISendCodeResponse   = ai.AISendCodeResponse
	AIVideoChatRequest   = ai.AIVideoChatRequest
	AIVideoChatResponse  = ai.AIVideoChatResponse

	Ai interface {
		AICommonChat(ctx context.Context, in *AICommonChatRequest, opts ...grpc.CallOption) (*AICommonChatResponse, error)
		AIVideoChat(ctx context.Context, in *AIVideoChatRequest, opts ...grpc.CallOption) (*AIVideoChatResponse, error)
		AISendCode(ctx context.Context, in *AISendCodeRequest, opts ...grpc.CallOption) (*AISendCodeResponse, error)
		AIGetUserInfo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
		AI(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error)
	}

	defaultAi struct {
		cli zrpc.Client
	}
)

func NewAi(cli zrpc.Client) Ai {
	return &defaultAi{
		cli: cli,
	}
}

func (m *defaultAi) AICommonChat(ctx context.Context, in *AICommonChatRequest, opts ...grpc.CallOption) (*AICommonChatResponse, error) {
	client := ai.NewAiClient(m.cli.Conn())
	return client.AICommonChat(ctx, in, opts...)
}

func (m *defaultAi) AIVideoChat(ctx context.Context, in *AIVideoChatRequest, opts ...grpc.CallOption) (*AIVideoChatResponse, error) {
	client := ai.NewAiClient(m.cli.Conn())
	return client.AIVideoChat(ctx, in, opts...)
}

func (m *defaultAi) AISendCode(ctx context.Context, in *AISendCodeRequest, opts ...grpc.CallOption) (*AISendCodeResponse, error) {
	client := ai.NewAiClient(m.cli.Conn())
	return client.AISendCode(ctx, in, opts...)
}

func (m *defaultAi) AIGetUserInfo(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	client := ai.NewAiClient(m.cli.Conn())
	return client.AIGetUserInfo(ctx, in, opts...)
}

func (m *defaultAi) AI(ctx context.Context, in *AIRequest, opts ...grpc.CallOption) (*AIResponse, error) {
	client := ai.NewAiClient(m.cli.Conn())
	return client.AI(ctx, in, opts...)
}
