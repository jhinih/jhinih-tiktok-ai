type SendCodeRequest {
	Email string `json:"email"`
}

type SendCodeResponse {

}

type RegisterRequest {
	Email    string `json:"email"`
	Code     string `json:"code"`
	Password string `json:"password"`
	Username string `json:"username"`
	Avatar   string `json:"avatar" gorm:"column:avatar;type:varchar(255);comment:头像URL"`
	//Phone         string `gorm:"column:phone;type:varchar(20);comment:手机号" valid:"matches(^1[3-9]{1}\\d{9}$)"`
	//ClientIp      string `gorm:"column:client_ip;type:varchar(50);comment:客户端IP"`
	//ClientPort    string `gorm:"column:client_port;type:varchar(20);comment:客户端端口"`
	//DeviceInfo    string `gorm:"column:device_info;type:varchar(255);comment:设备信息"`
	//Bio   string `gorm:"column:bio;type:varchar(255);comment:个人简介"`
}

type RegisterResponse {
	Atoken string `json:"atoken"`
}

type LoginRequest {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse {
	Atoken string `json:"atoken"`
	Rtoken string `json:"rtoken"`
}

type RefreshTokenRequest {
	Rtoken string `json:"rtoken"`
}

type RefreshTokenResponse {
	Atoken string `json:"atoken"`
}

type GetTokenRequest {
	UserID   string `json:"user_id"`
	UserName string `json:"user_name"`
	Role     string `json:"role"`
}

type GetTokenResponse {
	Atoken string `json:"atoken"`
}

@server (
	prefix: /api/login
)
service login {
	@handler SendCode
	post /send-code (SendCodeRequest) returns (SendCodeResponse)

	@handler Register
	post /register (RegisterRequest) returns (RegisterResponse)

	@handler Login
	post /login (LoginRequest) returns (LoginResponse)

	@handler RefreshToken
	post /refresh-token (RefreshTokenRequest) returns (RefreshTokenResponse)

	@handler GetToken
	post /get-token (GetTokenRequest) returns (GetTokenResponse)
}

// goctl api go -api login.api -dir . --home ../../../template
//# 在任意空白目录执行，只生成 template 文件夹
//goctl template init --home .
