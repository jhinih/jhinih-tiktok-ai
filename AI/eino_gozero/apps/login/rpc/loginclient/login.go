// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: login.proto

package loginclient

import (
	"context"

	"eino_gozero/apps/login/rpc/types/login"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetTokenRequest      = login.GetTokenRequest
	GetTokenResponse     = login.GetTokenResponse
	LoginRequest         = login.LoginRequest
	LoginResponse        = login.LoginResponse
	RefreshTokenRequest  = login.RefreshTokenRequest
	RefreshTokenResponse = login.RefreshTokenResponse
	RegisterRequest      = login.RegisterRequest
	RegisterResponse     = login.RegisterResponse
	SendCodeRequest      = login.SendCodeRequest
	SendCodeResponse     = login.SendCodeResponse

	Login interface {
		SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
		GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	}

	defaultLogin struct {
		cli zrpc.Client
	}
)

func NewLogin(cli zrpc.Client) Login {
	return &defaultLogin{
		cli: cli,
	}
}

func (m *defaultLogin) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	client := login.NewLoginClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}

func (m *defaultLogin) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := login.NewLoginClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultLogin) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := login.NewLoginClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultLogin) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	client := login.NewLoginClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}

func (m *defaultLogin) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	client := login.NewLoginClient(m.cli.Conn())
	return client.GetToken(ctx, in, opts...)
}
